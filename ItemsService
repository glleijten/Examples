<?php

namespace App\Services;

use Illuminate\Support\Facades\Auth;
use App\Item;
use App\ItemAdditional;
use App\ItemOrder;
use App\Keyword;
use App\Category;
use App\Theme;
use App\Media;
use App\Magazine;
use App\User;
use App\Competence;
use App\Type;
use App\Http\Requests\StoreElearning;
use Illuminate\Http\Request;
use App\Traits\ValidateVideo;
use App\Traits\ValidateImage;
use Validator;
use DB;

// I chose this example (even though it has no annotation or anything that I like) because the update() method was a pain to get right
// and even after it worked, I hated the way how unreadable the code got after the 2nd isset

class ItemsService
{
	use ValidateVideo;
	use ValidateImage;

  public function update(StoreElearning $request, $id)
  {

    $item = Item::find($id);

    $item->name = $request->name;
    $item->description = $request->description;
    $item->target_audience = $request->target_audience;
    $item->price = $request->price;
    $item->goal = $request->goal;
    $item->save();

    /*
      Additional info
    */

    if (isset($request->subtitle)) {
      $subtitle = $item->additionals()->where('key', 'subtitle')->first();
      $subtitle->value = $request->subtitle;
      $subtitle->save();
    }

    if ($request->has('difficulty')) {
      $difficulty = $item->additionals()->where('key', 'difficulty')->first();
      $difficulty->value = $request->difficulty;
      $difficulty->save();
    }

    if (isset($request->subject)) {
      $json = json_decode($request->subject);
      $itemCompetences = $item->competences()->get();

      if (isset($json)) {
        foreach ($json as $key => $name) {
          if (!in_array($name, $itemCompetences->pluck('name')->toArray())) {
            $competence = Competence::create(['name' => $name]);
            $item->competences()->attach($competence);
          }
        }

        foreach ($itemCompetences as $comp) {
          if (!in_array($comp->name, $json)) {
            $competence = Competence::find($comp->id);
            $item->competences()->detach($comp);
            $comp->delete();
          }
        }
      }
    }

    //save/update array of keywords
    if (isset($request->keywords)) {
      $keywords = json_decode($request->keywords);

      foreach ($keywords as $key => $name) {
        $keyword = Keyword::firstOrCreate(['name' => $name]);
        $keywords[$key] = $keyword->id;
      }
      $item->keywords()->sync($keywords, true);
    }

    $this->updateImage($item, $request->file('image'), 'item', $item->images()->first()->image);


    if (isset($request->video)) {
      $oldVideo = $item->media()->first();
      if($oldVideo !== null) {
        $video = $this->processVideo($request->video);
        $item->media()->sync($video, true);
      } else {
        $video = $this->processVideo($request->video);
            $item->media()->attach($video);
      }
    }
  }
}
